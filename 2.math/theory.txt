=> gcd => greatest common divisor
-----------------------------------------------------------------------------
=> euclid's algorithm (long division method)
=> gcd(a, b) = gcd(b%a, a)
int gcd(a, b){
    if(b%a == 0) return a;
    return gcd(b%a, a);
}

=> O(logn)
=> use cpp inbuilt function __gcd(a, b)
------------------------------------------------------------------------------

=> extended euclidean algorithm

Q. find x1 and y1
a*x1 + b*y1 = gcd(a, b) = g

(b%a)*x2 + a*y2 = gcd(b%a, a) = g

(a%(b%a))*x3 + (b%a)*y3 = gcd(a%(b%a), (b%a)) = g

.....

g*xn + 0*yn = g



hence xn = 1, yn = 0 (one of the possible values of yn)

but we need x1, y1

b%a = b - (a * floor((b/a)))

so, (b - (a * floor(b/a)))*x2 + ay2 = g

b*x2 + a(y2 - x2*(floor(b/a))) = g

so, y1 = x2
x1 = (y2 - (x2*(floor(b/a))))

so, yi = xi+1
xi = (yi+1 - (xi+1*(floor(b/a))))
------------------------------------------------------------------------------

linear diophantine equation
a*x + b*y = k*gcd(a, b)

a*(x/k) + b*(y/k) = gcd(a, b)
a*x' + b*y' = gcd(a, b)
find x', y'

then x = k*x'
y = k*y'

------------------------------------------------------------------------------
fibonacci numbers
tn = tn-1 + tn-2
t0= 0
t1 = 1

tribonacci numbers
tn = tn-1 + tn-2 + tn-3

t0 =0
t1 = 1
t2 = 1
-------------------------------------------------------------------------------
=> lcm => least common multiple
=> gcd(a, b)*lcm(a, b) = a*b
=> proof:
=> prime factorisation of a = (p1^x)*(p2^y)*(p4^z)...
=> prime factorisation of b = (p1^u)*(p2^v)*(p4^w)...
=> lcm(a, b) = (p1^(max(x, y)))*(p2^(max(v, y)))....
=> gcd(a, b) = (p1^(min(x, y)))*(p2^(min(v, y)))....

------------------------------------------------------------------------------
=> goldbach's conjecture:
=> (every even number can be written as a sum of two primes)
------------------------------------------------------------------------------

=> calculating divisors of a number
=> O(sqrt(n))

36
|          
|    1 X 36 
|    2 X 18
|    3 X 12
|    4 X 9
|    6 X 6
V
=> IF I DIVISOR (N/I) ALSO DIVISOR

------------------------------------------------------------------------------

=> sieve algorithm
=> O(nlog(logn))

------------------------------------------------------------------------------

=> (a+b)%m = ((a%m) + (b%m))%m
=> (a-b)%m = ((a%m) - (b%m) + m)%m
=> (a*b)%m = ((a%m) * (b%m))%m




=> (a/b)%m = (a*(b^-1))%m

=>         = (a%m * (b^-1)%m)%m

=> now , (b^-1)%m is known as mmi(modular multiplicative inverse) of b

=> if (a*x)%m = 1, for some x < n, then this x would be the mmi of a

=> now, by fermat's little theorem,

=> ((b^(m-1))%m) = 1, also known as the congruency of numbers 

=> so, (b^-1)%m = (b^(m-2))%m

------------------------------------------------------------------------------

prime factorisation

=> simple approach
=> O(sqrt(n))

=> calculate sieve (store greatest ptime number that can divide that number in the sieve array)
=> O(logn)

-----------------------------------------------------------------------------

=> chinese remainder theorem

let us say,

x%p1 = k1
x%p2 = k2
...
x%pn = kn

then, by crt 
there will be a solution of x from 0 to p-1
where p = p1*p2*...pn

or in other words x%p = 0


=> condition required for crt

p1, p2, ...pn are pairwise coprime

=> proof of chinese remainder theorem by garner's algorithm

x = x1 + x2*p1 + x3*p1*p2 + .... + xn*p1*p2*p3..p(n-1)


x%p1 = x1%p1
k1 = x1%p1
-----------------
x1 = k1
-----------------


x%p2 = (x1 + x2*p1)%p2
k2%p2 =  (x1 + x2*p1)%p2
x2 = ((k2 - k1)/p1)%p2
-----------------
x2 = (k2 - k1)%p2  * (p1^-1)%p2
-----------------


similarly,

-----------------
x3 = ((k3 - x1 - x2*p1)*(p1^-1)*(p2^-1))%p3
-----------------